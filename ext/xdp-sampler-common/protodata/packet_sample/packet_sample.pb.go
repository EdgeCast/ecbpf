// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.1
// source: packet_sample.proto

package packet_sample

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PacketSample_XDPAction int32

const (
	PacketSample_XDP_ABORTED  PacketSample_XDPAction = 0
	PacketSample_XDP_DROP     PacketSample_XDPAction = 1
	PacketSample_XDP_PASS     PacketSample_XDPAction = 2
	PacketSample_XDP_TX       PacketSample_XDPAction = 3
	PacketSample_XDP_REDIRECT PacketSample_XDPAction = 4
)

// Enum value maps for PacketSample_XDPAction.
var (
	PacketSample_XDPAction_name = map[int32]string{
		0: "XDP_ABORTED",
		1: "XDP_DROP",
		2: "XDP_PASS",
		3: "XDP_TX",
		4: "XDP_REDIRECT",
	}
	PacketSample_XDPAction_value = map[string]int32{
		"XDP_ABORTED":  0,
		"XDP_DROP":     1,
		"XDP_PASS":     2,
		"XDP_TX":       3,
		"XDP_REDIRECT": 4,
	}
)

func (x PacketSample_XDPAction) Enum() *PacketSample_XDPAction {
	p := new(PacketSample_XDPAction)
	*p = x
	return p
}

func (x PacketSample_XDPAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PacketSample_XDPAction) Descriptor() protoreflect.EnumDescriptor {
	return file_packet_sample_proto_enumTypes[0].Descriptor()
}

func (PacketSample_XDPAction) Type() protoreflect.EnumType {
	return &file_packet_sample_proto_enumTypes[0]
}

func (x PacketSample_XDPAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PacketSample_XDPAction.Descriptor instead.
func (PacketSample_XDPAction) EnumDescriptor() ([]byte, []int) {
	return file_packet_sample_proto_rawDescGZIP(), []int{0, 0}
}

// Subset of https://www.tcpdump.org/linktypes.html
type PacketSample_LinkType int32

const (
	PacketSample_LINKTYPE_NULL     PacketSample_LinkType = 0
	PacketSample_LINKTYPE_ETHERNET PacketSample_LinkType = 1   // Standard capture including ethernet header
	PacketSample_LINKTYPE_RAW      PacketSample_LinkType = 101 // Raw IP; the packet begins with an IPv4 or IPv6 header, with the
	// "version" field of the header indicating whether it's an IPv4 or IPv6 header.
	PacketSample_LINKTYPE_LINUX_SLL  PacketSample_LinkType = 113 // Linux capture of "any"
	PacketSample_LINKTYPE_IPV4       PacketSample_LinkType = 228 // Raw packet starting with IPv4 header
	PacketSample_LINKTYPE_IPV6       PacketSample_LinkType = 229 // Raw packet starting with IPv6 header
	PacketSample_LINKTYPE_LINUX_SLL2 PacketSample_LinkType = 276 // Possibly not implemented yet
)

// Enum value maps for PacketSample_LinkType.
var (
	PacketSample_LinkType_name = map[int32]string{
		0:   "LINKTYPE_NULL",
		1:   "LINKTYPE_ETHERNET",
		101: "LINKTYPE_RAW",
		113: "LINKTYPE_LINUX_SLL",
		228: "LINKTYPE_IPV4",
		229: "LINKTYPE_IPV6",
		276: "LINKTYPE_LINUX_SLL2",
	}
	PacketSample_LinkType_value = map[string]int32{
		"LINKTYPE_NULL":       0,
		"LINKTYPE_ETHERNET":   1,
		"LINKTYPE_RAW":        101,
		"LINKTYPE_LINUX_SLL":  113,
		"LINKTYPE_IPV4":       228,
		"LINKTYPE_IPV6":       229,
		"LINKTYPE_LINUX_SLL2": 276,
	}
)

func (x PacketSample_LinkType) Enum() *PacketSample_LinkType {
	p := new(PacketSample_LinkType)
	*p = x
	return p
}

func (x PacketSample_LinkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PacketSample_LinkType) Descriptor() protoreflect.EnumDescriptor {
	return file_packet_sample_proto_enumTypes[1].Descriptor()
}

func (PacketSample_LinkType) Type() protoreflect.EnumType {
	return &file_packet_sample_proto_enumTypes[1]
}

func (x PacketSample_LinkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PacketSample_LinkType.Descriptor instead.
func (PacketSample_LinkType) EnumDescriptor() ([]byte, []int) {
	return file_packet_sample_proto_rawDescGZIP(), []int{0, 1}
}

// Inspired by libpcap pcap_hdr_s
type PacketSample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Payload
	HostInfo     *PacketSample_HostInfo     `protobuf:"bytes,1,opt,name=host_info,json=hostInfo,proto3" json:"host_info,omitempty"`
	PacketCommon *PacketSample_PacketCommon `protobuf:"bytes,2,opt,name=packet_common,json=packetCommon,proto3" json:"packet_common,omitempty"`
	Packet       *PacketSample_Packet       `protobuf:"bytes,3,opt,name=packet,proto3" json:"packet,omitempty"` // repeated Packet packets = 4;  // In case we need to bundle more packets together
}

func (x *PacketSample) Reset() {
	*x = PacketSample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packet_sample_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PacketSample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketSample) ProtoMessage() {}

func (x *PacketSample) ProtoReflect() protoreflect.Message {
	mi := &file_packet_sample_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketSample.ProtoReflect.Descriptor instead.
func (*PacketSample) Descriptor() ([]byte, []int) {
	return file_packet_sample_proto_rawDescGZIP(), []int{0}
}

func (x *PacketSample) GetHostInfo() *PacketSample_HostInfo {
	if x != nil {
		return x.HostInfo
	}
	return nil
}

func (x *PacketSample) GetPacketCommon() *PacketSample_PacketCommon {
	if x != nil {
		return x.PacketCommon
	}
	return nil
}

func (x *PacketSample) GetPacket() *PacketSample_Packet {
	if x != nil {
		return x.Packet
	}
	return nil
}

// Information about the host the packet came from
type PacketSample_HostInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"` // hostname of host doing the capturing
	Pop      string `protobuf:"bytes,2,opt,name=pop,proto3" json:"pop,omitempty"`
	Srvtype  string `protobuf:"bytes,3,opt,name=srvtype,proto3" json:"srvtype,omitempty"`
}

func (x *PacketSample_HostInfo) Reset() {
	*x = PacketSample_HostInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packet_sample_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PacketSample_HostInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketSample_HostInfo) ProtoMessage() {}

func (x *PacketSample_HostInfo) ProtoReflect() protoreflect.Message {
	mi := &file_packet_sample_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketSample_HostInfo.ProtoReflect.Descriptor instead.
func (*PacketSample_HostInfo) Descriptor() ([]byte, []int) {
	return file_packet_sample_proto_rawDescGZIP(), []int{0, 0}
}

func (x *PacketSample_HostInfo) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *PacketSample_HostInfo) GetPop() string {
	if x != nil {
		return x.Pop
	}
	return ""
}

func (x *PacketSample_HostInfo) GetSrvtype() string {
	if x != nil {
		return x.Srvtype
	}
	return ""
}

// Information common to all packets
type PacketSample_PacketCommon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface string                `protobuf:"bytes,1,opt,name=interface,proto3" json:"interface,omitempty"` // Interface packet came in on
	Link      PacketSample_LinkType `protobuf:"varint,2,opt,name=link,proto3,enum=packet_sample.PacketSample_LinkType" json:"link,omitempty"`
}

func (x *PacketSample_PacketCommon) Reset() {
	*x = PacketSample_PacketCommon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packet_sample_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PacketSample_PacketCommon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketSample_PacketCommon) ProtoMessage() {}

func (x *PacketSample_PacketCommon) ProtoReflect() protoreflect.Message {
	mi := &file_packet_sample_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketSample_PacketCommon.ProtoReflect.Descriptor instead.
func (*PacketSample_PacketCommon) Descriptor() ([]byte, []int) {
	return file_packet_sample_proto_rawDescGZIP(), []int{0, 1}
}

func (x *PacketSample_PacketCommon) GetInterface() string {
	if x != nil {
		return x.Interface
	}
	return ""
}

func (x *PacketSample_PacketCommon) GetLink() PacketSample_LinkType {
	if x != nil {
		return x.Link
	}
	return PacketSample_LINKTYPE_NULL
}

// Inspired by libpcap pcaprec_hdr_t
type PacketSample_Packet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Payload
	TvSec  int64  `protobuf:"varint,1,opt,name=tv_sec,json=tvSec,proto3" json:"tv_sec,omitempty"` // struct timespec
	TvNsec int32  `protobuf:"varint,2,opt,name=tv_nsec,json=tvNsec,proto3" json:"tv_nsec,omitempty"`
	Len    int32  `protobuf:"varint,3,opt,name=len,proto3" json:"len,omitempty"` // Length of the original packet
	Pkt    []byte `protobuf:"bytes,4,opt,name=pkt,proto3" json:"pkt,omitempty"`  // Length of capture, caplen in pcaprec_hdr_t, is the length here
	// Sample Metadata
	SamplingProbabilityReciprocal int32                  `protobuf:"varint,5,opt,name=sampling_probability_reciprocal,json=samplingProbabilityReciprocal,proto3" json:"sampling_probability_reciprocal,omitempty"`
	Sequence                      int64                  `protobuf:"varint,6,opt,name=sequence,proto3" json:"sequence,omitempty"` // A sequence number so we can detect dropped packets further up the stack
	XdpAction                     PacketSample_XDPAction `protobuf:"varint,7,opt,name=xdp_action,json=xdpAction,proto3,enum=packet_sample.PacketSample_XDPAction" json:"xdp_action,omitempty"`
	XdpActionSource               int32                  `protobuf:"zigzag32,8,opt,name=xdp_action_source,json=xdpActionSource,proto3" json:"xdp_action_source,omitempty"` // XDP program slot for now.  Root array is -1 in ecbpf-land.
	XdpActionCode                 uint32                 `protobuf:"varint,9,opt,name=xdp_action_code,json=xdpActionCode,proto3" json:"xdp_action_code,omitempty"`         // Reason for why the action was taken.
	XdpActionMeta                 uint64                 `protobuf:"varint,10,opt,name=xdp_action_meta,json=xdpActionMeta,proto3" json:"xdp_action_meta,omitempty"`        // 64 bits to possibly explain the xdp_action_code.
}

func (x *PacketSample_Packet) Reset() {
	*x = PacketSample_Packet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packet_sample_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PacketSample_Packet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketSample_Packet) ProtoMessage() {}

func (x *PacketSample_Packet) ProtoReflect() protoreflect.Message {
	mi := &file_packet_sample_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketSample_Packet.ProtoReflect.Descriptor instead.
func (*PacketSample_Packet) Descriptor() ([]byte, []int) {
	return file_packet_sample_proto_rawDescGZIP(), []int{0, 2}
}

func (x *PacketSample_Packet) GetTvSec() int64 {
	if x != nil {
		return x.TvSec
	}
	return 0
}

func (x *PacketSample_Packet) GetTvNsec() int32 {
	if x != nil {
		return x.TvNsec
	}
	return 0
}

func (x *PacketSample_Packet) GetLen() int32 {
	if x != nil {
		return x.Len
	}
	return 0
}

func (x *PacketSample_Packet) GetPkt() []byte {
	if x != nil {
		return x.Pkt
	}
	return nil
}

func (x *PacketSample_Packet) GetSamplingProbabilityReciprocal() int32 {
	if x != nil {
		return x.SamplingProbabilityReciprocal
	}
	return 0
}

func (x *PacketSample_Packet) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *PacketSample_Packet) GetXdpAction() PacketSample_XDPAction {
	if x != nil {
		return x.XdpAction
	}
	return PacketSample_XDP_ABORTED
}

func (x *PacketSample_Packet) GetXdpActionSource() int32 {
	if x != nil {
		return x.XdpActionSource
	}
	return 0
}

func (x *PacketSample_Packet) GetXdpActionCode() uint32 {
	if x != nil {
		return x.XdpActionCode
	}
	return 0
}

func (x *PacketSample_Packet) GetXdpActionMeta() uint64 {
	if x != nil {
		return x.XdpActionMeta
	}
	return 0
}

var File_packet_sample_proto protoreflect.FileDescriptor

var file_packet_sample_proto_rawDesc = []byte{
	0x0a, 0x13, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x22, 0x98, 0x08, 0x0a, 0x0c, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x41, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08,
	0x68, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4d, 0x0a, 0x0d, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x06, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x1a, 0x52, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70,
	0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x6f, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x72, 0x76, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x72, 0x76, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x66, 0x0a, 0x0c, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x1a,
	0x82, 0x03, 0x0a, 0x06, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x76,
	0x5f, 0x73, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x76, 0x53, 0x65,
	0x63, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x76, 0x5f, 0x6e, 0x73, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x74, 0x76, 0x4e, 0x73, 0x65, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12, 0x10, 0x0a, 0x03,
	0x70, 0x6b, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x70, 0x6b, 0x74, 0x12, 0x46,
	0x0a, 0x1f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x72, 0x6f, 0x63, 0x61,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x72, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x44, 0x0a, 0x0a, 0x78, 0x64, 0x70, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x2e, 0x58, 0x44, 0x50, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x78,
	0x64, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x78, 0x64, 0x70, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x11, 0x52, 0x0f, 0x78, 0x64, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x78, 0x64, 0x70, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x78,
	0x64, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0f,
	0x78, 0x64, 0x70, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x78, 0x64, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x74, 0x61, 0x22, 0x56, 0x0a, 0x09, 0x58, 0x44, 0x50, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0f, 0x0a, 0x0b, 0x58, 0x44, 0x50, 0x5f, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x58, 0x44, 0x50, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x58, 0x44, 0x50, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x10, 0x02, 0x12, 0x0a,
	0x0a, 0x06, 0x58, 0x44, 0x50, 0x5f, 0x54, 0x58, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x58, 0x44,
	0x50, 0x5f, 0x52, 0x45, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x04, 0x22, 0xa0, 0x01, 0x0a,
	0x08, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x49, 0x4e,
	0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11,
	0x4c, 0x49, 0x4e, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45,
	0x54, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x49, 0x4e, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x52, 0x41, 0x57, 0x10, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x49, 0x4e, 0x4b, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x55, 0x58, 0x5f, 0x53, 0x4c, 0x4c, 0x10, 0x71, 0x12, 0x12, 0x0a,
	0x0d, 0x4c, 0x49, 0x4e, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x10, 0xe4,
	0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x49, 0x4e, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50,
	0x56, 0x36, 0x10, 0xe5, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x4c, 0x49, 0x4e, 0x4b, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x55, 0x58, 0x5f, 0x53, 0x4c, 0x4c, 0x32, 0x10, 0x94, 0x02, 0x42,
	0x57, 0x5a, 0x55, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63, 0x61,
	0x73, 0x74, 0x63, 0x64, 0x6e, 0x2e, 0x6e, 0x65, 0x74, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x63, 0x61,
	0x73, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x65, 0x6e, 0x67, 0x2f, 0x78, 0x64,
	0x70, 0x2d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_packet_sample_proto_rawDescOnce sync.Once
	file_packet_sample_proto_rawDescData = file_packet_sample_proto_rawDesc
)

func file_packet_sample_proto_rawDescGZIP() []byte {
	file_packet_sample_proto_rawDescOnce.Do(func() {
		file_packet_sample_proto_rawDescData = protoimpl.X.CompressGZIP(file_packet_sample_proto_rawDescData)
	})
	return file_packet_sample_proto_rawDescData
}

var file_packet_sample_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_packet_sample_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_packet_sample_proto_goTypes = []interface{}{
	(PacketSample_XDPAction)(0),       // 0: packet_sample.PacketSample.XDPAction
	(PacketSample_LinkType)(0),        // 1: packet_sample.PacketSample.LinkType
	(*PacketSample)(nil),              // 2: packet_sample.PacketSample
	(*PacketSample_HostInfo)(nil),     // 3: packet_sample.PacketSample.HostInfo
	(*PacketSample_PacketCommon)(nil), // 4: packet_sample.PacketSample.PacketCommon
	(*PacketSample_Packet)(nil),       // 5: packet_sample.PacketSample.Packet
}
var file_packet_sample_proto_depIdxs = []int32{
	3, // 0: packet_sample.PacketSample.host_info:type_name -> packet_sample.PacketSample.HostInfo
	4, // 1: packet_sample.PacketSample.packet_common:type_name -> packet_sample.PacketSample.PacketCommon
	5, // 2: packet_sample.PacketSample.packet:type_name -> packet_sample.PacketSample.Packet
	1, // 3: packet_sample.PacketSample.PacketCommon.link:type_name -> packet_sample.PacketSample.LinkType
	0, // 4: packet_sample.PacketSample.Packet.xdp_action:type_name -> packet_sample.PacketSample.XDPAction
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_packet_sample_proto_init() }
func file_packet_sample_proto_init() {
	if File_packet_sample_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_packet_sample_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PacketSample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packet_sample_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PacketSample_HostInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packet_sample_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PacketSample_PacketCommon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packet_sample_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PacketSample_Packet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_packet_sample_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_packet_sample_proto_goTypes,
		DependencyIndexes: file_packet_sample_proto_depIdxs,
		EnumInfos:         file_packet_sample_proto_enumTypes,
		MessageInfos:      file_packet_sample_proto_msgTypes,
	}.Build()
	File_packet_sample_proto = out.File
	file_packet_sample_proto_rawDesc = nil
	file_packet_sample_proto_goTypes = nil
	file_packet_sample_proto_depIdxs = nil
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pktstash_rpc

import (
	context "context"
	packet_sample "gitlab.edgecastcdn.net/edgecast/trafficeng/xdp-sampler-common/protodata/packet_sample"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IngestClient is the client API for Ingest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IngestClient interface {
	PacketSample(ctx context.Context, opts ...grpc.CallOption) (Ingest_PacketSampleClient, error)
}

type ingestClient struct {
	cc grpc.ClientConnInterface
}

func NewIngestClient(cc grpc.ClientConnInterface) IngestClient {
	return &ingestClient{cc}
}

func (c *ingestClient) PacketSample(ctx context.Context, opts ...grpc.CallOption) (Ingest_PacketSampleClient, error) {
	stream, err := c.cc.NewStream(ctx, &Ingest_ServiceDesc.Streams[0], "/pktsash_rpc.Ingest/PacketSample", opts...)
	if err != nil {
		return nil, err
	}
	x := &ingestPacketSampleClient{stream}
	return x, nil
}

type Ingest_PacketSampleClient interface {
	Send(*packet_sample.PacketSample) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type ingestPacketSampleClient struct {
	grpc.ClientStream
}

func (x *ingestPacketSampleClient) Send(m *packet_sample.PacketSample) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ingestPacketSampleClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// IngestServer is the server API for Ingest service.
// All implementations must embed UnimplementedIngestServer
// for forward compatibility
type IngestServer interface {
	PacketSample(Ingest_PacketSampleServer) error
	mustEmbedUnimplementedIngestServer()
}

// UnimplementedIngestServer must be embedded to have forward compatible implementations.
type UnimplementedIngestServer struct {
}

func (UnimplementedIngestServer) PacketSample(Ingest_PacketSampleServer) error {
	return status.Errorf(codes.Unimplemented, "method PacketSample not implemented")
}
func (UnimplementedIngestServer) mustEmbedUnimplementedIngestServer() {}

// UnsafeIngestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IngestServer will
// result in compilation errors.
type UnsafeIngestServer interface {
	mustEmbedUnimplementedIngestServer()
}

func RegisterIngestServer(s grpc.ServiceRegistrar, srv IngestServer) {
	s.RegisterService(&Ingest_ServiceDesc, srv)
}

func _Ingest_PacketSample_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IngestServer).PacketSample(&ingestPacketSampleServer{stream})
}

type Ingest_PacketSampleServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*packet_sample.PacketSample, error)
	grpc.ServerStream
}

type ingestPacketSampleServer struct {
	grpc.ServerStream
}

func (x *ingestPacketSampleServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ingestPacketSampleServer) Recv() (*packet_sample.PacketSample, error) {
	m := new(packet_sample.PacketSample)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Ingest_ServiceDesc is the grpc.ServiceDesc for Ingest service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ingest_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pktsash_rpc.Ingest",
	HandlerType: (*IngestServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PacketSample",
			Handler:       _Ingest_PacketSample_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "pktstash_rpc.proto",
}
